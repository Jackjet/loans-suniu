<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.zhicheng.dao.EchoLoanRecordDao">
    
	<sql id="echoLoanRecordColumns">
		a.id AS "id",
		a.user_id AS "userId",
		a.apply_id AS "applyId",
		a.org_name AS "orgName",
		a.name AS "name",
		a.cert_no AS "certNo",
		a.loan_date AS "loanDate",
		a.periods AS "periods",
		a.loan_amount AS "loanAmount",
		a.approval_status_code AS "approvalStatusCode",
		a.loan_status_code AS "loanStatusCode",
		a.loan_type_code AS "loanTypeCode",
		a.overdue_amount AS "overdueAmount",
		a.overdue_status AS "overdueStatus",
		a.overdue_total AS "overdueTotal",
		a.overdue_m3 AS "overdueM3",
		a.overdue_m6 AS "overdueM6",
		a.flow_id AS "flowId",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="echoLoanRecordJoins">

	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{userId},
		#{applyId},
		#{orgName},
		#{name},
		#{certNo},
		#{loanDate},
		#{periods},
		#{loanAmount},
		#{approvalStatusCode},
		#{loanStatusCode},
		#{loanTypeCode},
		#{overdueAmount},
		#{overdueStatus},
		#{overdueTotal},
		#{overdueM3},
		#{overdueM6},
		#{flowId},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.userId},
		#{entity.applyId},
		#{entity.orgName},
		#{entity.name},
		#{entity.certNo},
		#{entity.loanDate},
		#{entity.periods},
		#{entity.loanAmount},
		#{entity.approvalStatusCode},
		#{entity.loanStatusCode},
		#{entity.loanTypeCode},
		#{entity.overdueAmount},
		#{entity.overdueStatus},
		#{entity.overdueTotal},
		#{entity.overdueM3},
		#{entity.overdueM6},
		#{entity.flowId},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		user_id,
		apply_id,
		org_name,
		name,
		cert_no,
		loan_date,
		periods,
		loan_amount,
		approval_status_code,
		loan_status_code,
		loan_type_code,
		overdue_amount,
		overdue_status,
		overdue_total,
		overdue_m3,
		overdue_m6,
		flow_id,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		user_id = #{userId},
		apply_id = #{applyId},
		org_name = #{orgName},
		name = #{name},
		cert_no = #{certNo},
		loan_date = #{loanDate},
		periods = #{periods},
		loan_amount = #{loanAmount},
		approval_status_code = #{approvalStatusCode},
		loan_status_code = #{loanStatusCode},
		loan_type_code = #{loanTypeCode},
		overdue_amount = #{overdueAmount},
		overdue_status = #{overdueStatus},
		overdue_total = #{overdueTotal},
		overdue_m3 = #{overdueM3},
		overdue_m6 = #{overdueM6},
		flow_id = #{flowId},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.applyId != null">
				apply_id = #{entity.applyId},
			</if>
			<if test="entity.orgName != null">
				org_name = #{entity.orgName},
			</if>
			<if test="entity.name != null">
				name = #{entity.name},
			</if>
			<if test="entity.certNo != null">
				cert_no = #{entity.certNo},
			</if>
			<if test="entity.loanDate != null">
				loan_date = #{entity.loanDate},
			</if>
			<if test="entity.periods != null">
				periods = #{entity.periods},
			</if>
			<if test="entity.loanAmount != null">
				loan_amount = #{entity.loanAmount},
			</if>
			<if test="entity.approvalStatusCode != null">
				approval_status_code = #{entity.approvalStatusCode},
			</if>
			<if test="entity.loanStatusCode != null">
				loan_status_code = #{entity.loanStatusCode},
			</if>
			<if test="entity.loanTypeCode != null">
				loan_type_code = #{entity.loanTypeCode},
			</if>
			<if test="entity.overdueAmount != null">
				overdue_amount = #{entity.overdueAmount},
			</if>
			<if test="entity.overdueStatus != null">
				overdue_status = #{entity.overdueStatus},
			</if>
			<if test="entity.overdueTotal != null">
				overdue_total = #{entity.overdueTotal},
			</if>
			<if test="entity.overdueM3 != null">
				overdue_m3 = #{entity.overdueM3},
			</if>
			<if test="entity.overdueM6 != null">
				overdue_m6 = #{entity.overdueM6},
			</if>
			<if test="entity.flowId != null">
				flow_id = #{entity.flowId},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		<include refid="whereByCriteria" />
		ORDER BY a.loan_date DESC
	</select>
	
	<select id="findAllByCriteriaList" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="EchoLoanRecord">
		SELECT 
		<include refid="echoLoanRecordColumns"/>
		FROM zhicheng_echo_loan_record a
		<include refid="echoLoanRecordJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM zhicheng_echo_loan_record
		<include refid="echoLoanRecordJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM zhicheng_echo_loan_record
		<include refid="echoLoanRecordJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO zhicheng_echo_loan_record
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO zhicheng_echo_loan_record
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE zhicheng_echo_loan_record SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE zhicheng_echo_loan_record 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE zhicheng_echo_loan_record 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE zhicheng_echo_loan_record		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE zhicheng_echo_loan_record
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE zhicheng_echo_loan_record
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE zhicheng_echo_loan_record 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE zhicheng_echo_loan_record
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM zhicheng_echo_loan_record
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM zhicheng_echo_loan_record
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM zhicheng_echo_loan_record
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM zhicheng_echo_loan_record
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	
	 
</mapper>