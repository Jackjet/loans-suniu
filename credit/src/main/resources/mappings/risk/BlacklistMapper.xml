<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.risk.dao.BlacklistDao">
    
	<sql id="blacklistColumns">
		a.id AS "id",
		a.user_id AS "userId",
		a.id_no AS "idNo",
		a.mobile AS "mobile",
		a.telphone AS "telphone",
		a.qq AS "qq",
		a.name AS "name",
		a.risk_code AS "riskCode",
		a.risk_name AS "riskName",
		a.source_type AS "sourceType",
		a.source_org AS "sourceOrg",
		a.overdue_period AS "overduePeriod",
		a.overdue_amt AS "overdueAmt",
		a.time AS "time",
		a.reason AS "reason",
		a.extend_info AS "extendInfo",
		a.status AS "status",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="blacklistJoins">

	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{userId},
		#{idNo},
		#{mobile},
		#{telphone},
		#{qq},
		#{name},
		#{riskCode},
		#{riskName},
		#{sourceType},
		#{sourceOrg},
		#{overduePeriod},
		#{overdueAmt},
		#{time},
		#{reason},
		#{extendInfo},
		#{status},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.userId},
		#{entity.idNo},
		#{entity.mobile},
		#{entity.telphone},
		#{entity.qq},
		#{entity.name},
		#{entity.riskCode},
		#{entity.riskName},
		#{entity.sourceType},
		#{entity.sourceOrg},
		#{entity.overduePeriod},
		#{entity.overdueAmt},
		#{entity.time},
		#{entity.reason},
		#{entity.extendInfo},
		#{entity.status},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		user_id,
		id_no,
		mobile,
		telphone,
		qq,
		name,
		risk_code,
		risk_name,
		source_type,
		source_org,
		overdue_period,
		overdue_amt,
		time,
		reason,
		extend_info,
		status,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		user_id = #{userId},
		id_no = #{idNo},
		mobile = #{mobile},
		telphone = #{telphone},
		qq = #{qq},
		name = #{name},
		risk_code = #{riskCode},
		risk_name = #{riskName},
		source_type = #{sourceType},
		source_org = #{sourceOrg},
		overdue_period = #{overduePeriod},
		overdue_amt = #{overdueAmt},
		time = #{time},
		reason = #{reason},
		extend_info = #{extendInfo},
		status = #{status},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.idNo != null">
				id_no = #{entity.idNo},
			</if>
			<if test="entity.mobile != null">
				mobile = #{entity.mobile},
			</if>
			<if test="entity.telphone != null">
				telphone = #{entity.telphone},
			</if>
			<if test="entity.qq != null">
				qq = #{entity.qq},
			</if>
			<if test="entity.name != null">
				name = #{entity.name},
			</if>
			<if test="entity.riskCode != null">
				risk_code = #{entity.riskCode},
			</if>
			<if test="entity.riskName != null">
				risk_name = #{entity.riskName},
			</if>
			<if test="entity.sourceType != null">
				source_type = #{entity.sourceType},
			</if>
			<if test="entity.sourceOrg != null">
				source_org = #{entity.sourceOrg},
			</if>
			<if test="entity.overduePeriod != null">
				overdue_period = #{entity.overduePeriod},
			</if>
			<if test="entity.overdueAmt != null">
				overdue_amt = #{entity.overdueAmt},
			</if>
			<if test="entity.time != null">
				time = #{entity.time},
			</if>
			<if test="entity.reason != null">
				reason = #{entity.reason},
			</if>
			<if test="entity.extendInfo != null">
				extend_info = #{entity.extendInfo},
			</if>
			<if test="entity.status != null">
				status = #{entity.status},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="getALLBlackCust" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
	</select>
		
    <select id="getByCriteria" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="Blacklist">
		SELECT 
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>

	<select id="getBlacklistByPhoneList" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM risk_blacklist a
		where mobile in
		<foreach item="phone" collection="phoneList" open="(" separator="," close=")">
			#{phone}
		</foreach>
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM risk_blacklist
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM risk_blacklist
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<select id="findBlacklistCount" resultType="Long">
		SELECT COUNT(1) FROM risk_blacklist
		where user_id=#{userId} and status=1 and del=0
	</select>
	
	<insert id="insert">
		INSERT INTO risk_blacklist
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO risk_blacklist
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE risk_blacklist SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateBlackById">
		UPDATE risk_blacklist SET 
		status = #{status},
		update_by = #{updateBy},
		update_time = now()
		WHERE id = #{id}
	</update>
	
	
	<update id="updateByCriteriaSelective">
		UPDATE risk_blacklist 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE risk_blacklist 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE risk_blacklist		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE risk_blacklist
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE risk_blacklist
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE risk_blacklist 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE risk_blacklist
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM risk_blacklist
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM risk_blacklist
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM risk_blacklist
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM risk_blacklist
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	
	<select id="selectBlackList" resultType="com.rongdu.loans.risk.vo.BlacklistVO">
		SELECT 
			<include refid="blacklistColumns"/>
			FROM risk_blacklist a
			<where>
				a.del=0
				<if test="op.name != null and op.name != '' ">
				and	a.name = #{op.name}
				</if>
				<if test="op.mobile != null and op.mobile != '' ">
				and	a.mobile = #{op.mobile}
				</if>
				<if test="op.status != null">
				and	a.status=#{op.status}
				</if>
			</where>	
	</select>
	
	
	<select id="countInBlacklist" resultType="Long">
		SELECT COUNT(1) FROM risk_blacklist
		where user_id=#{userId}  and del=0 <!--  and status in  (0,1) -->
	</select>

	<select id="inBlackList" resultType="int">
		SELECT COUNT(1) FROM risk_blacklist
		where del=0 and status in  (0,1)
		<if test="userName != null and userName !=''">
			and name=#{userName}
		</if>
		<if test="userIdCard != null and userIdCard !=''">
			and id_no LIKE CONCAT(CONCAT('%', #{userIdCard}), '%')
		</if>
		<if test="userPhone != null and userPhone !=''">
			and mobile LIKE CONCAT(CONCAT('%', #{userPhone}), '%')
		</if>
	</select>


</mapper>