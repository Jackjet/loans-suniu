<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.baiqishi.dao.ReportDao">
    
	<sql id="reportColumns">
		a.id AS "id",
		a.user_id AS "userId",
		a.apply_id AS "applyId",
		a.report_time AS "reportTime",
		a.name AS "name",
		a.cert_no AS "certNo",
		a.mobile AS "mobile",
		a.mobile_belong_to AS "mobileBelongTo",
		a.mobile_mno_type AS "mobileMnoType",
		a.gender AS "gender",
		a.constellation AS "constellation",
		a.age AS "age",
		a.birth_address AS "birthAddress",
		a.bak AS "bak",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="reportJoins">

	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{userId},
		#{applyId},
		#{reportTime},
		#{name},
		#{certNo},
		#{mobile},
		#{mobileBelongTo},
		#{mobileMnoType},
		#{gender},
		#{constellation},
		#{age},
		#{birthAddress},
		#{bak},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.userId},
		#{entity.applyId},
		#{entity.reportTime},
		#{entity.name},
		#{entity.certNo},
		#{entity.mobile},
		#{entity.mobileBelongTo},
		#{entity.mobileMnoType},
		#{entity.gender},
		#{entity.constellation},
		#{entity.age},
		#{entity.birthAddress},
		#{entity.bak},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		user_id,
		apply_id,
		report_time,
		name,
		cert_no,
		mobile,
		mobile_belong_to,
		mobile_mno_type,
		gender,
		constellation,
		age,
		birth_address,
		bak,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		user_id = #{userId},
		apply_id = #{applyId},
		report_time = #{reportTime},
		name = #{name},
		cert_no = #{certNo},
		mobile = #{mobile},
		mobile_belong_to = #{mobileBelongTo},
		mobile_mno_type = #{mobileMnoType},
		gender = #{gender},
		constellation = #{constellation},
		age = #{age},
		birth_address = #{birthAddress},
		bak = #{bak},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.applyId != null">
				apply_id = #{entity.applyId},
			</if>
			<if test="entity.reportTime != null">
				report_time = #{entity.reportTime},
			</if>
			<if test="entity.name != null">
				name = #{entity.name},
			</if>
			<if test="entity.certNo != null">
				cert_no = #{entity.certNo},
			</if>
			<if test="entity.mobile != null">
				mobile = #{entity.mobile},
			</if>
			<if test="entity.mobileBelongTo != null">
				mobile_belong_to = #{entity.mobileBelongTo},
			</if>
			<if test="entity.mobileMnoType != null">
				mobile_mno_type = #{entity.mobileMnoType},
			</if>
			<if test="entity.gender != null">
				gender = #{entity.gender},
			</if>
			<if test="entity.constellation != null">
				constellation = #{entity.constellation},
			</if>
			<if test="entity.age != null">
				age = #{entity.age},
			</if>
			<if test="entity.birthAddress != null">
				birth_address = #{entity.birthAddress},
			</if>
			<if test="entity.bak != null">
				bak = #{entity.bak},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="Report">
		SELECT 
		<include refid="reportColumns"/>
		FROM baiqishi_report a
		<include refid="reportJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM baiqishi_report
		<include refid="reportJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM baiqishi_report
		<include refid="reportJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO baiqishi_report
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO baiqishi_report
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE baiqishi_report SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE baiqishi_report 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE baiqishi_report 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE baiqishi_report		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE baiqishi_report
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE baiqishi_report
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE baiqishi_report 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE baiqishi_report
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM baiqishi_report
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM baiqishi_report
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM baiqishi_report
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM baiqishi_report
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	
	 
</mapper>