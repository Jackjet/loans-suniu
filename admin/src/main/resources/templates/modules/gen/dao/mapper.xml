<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>mapper</name>
	<filePath>src/main/resources/mappings/${moduleName}/${subModuleName}</filePath>
	<fileName>${ClassName}Mapper.xml</fileName>
	<content><![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dao">
    
    <#-- 输出字段列 -->
	<sql id="${className}Columns">
		<#assign columnField>
			<#list table.columnList as c>
		a.${c.name} AS "${c.javaFieldId}",
			</#list>
			<#list table.columnList as c>
				<#if c.showType?? && c.showType == "userselect">
					<#list c.javaFieldAttrs as a>
		u${c_index + 1}.${a[1]} AS "${c.simpleJavaField}.${a[0]}",
					</#list>
				<#elseif c.showType?? && c.showType == "officeselect">
					<#list c.javaFieldAttrs as a>
		o${c_index + 1}.${a[1]} AS "${c.simpleJavaField}.${a[0]}",
					</#list>
				<#elseif c.showType?? && c.showType == "areaselect">
					<#list c.javaFieldAttrs as a>
		a${c_index + 1}.${a[1]} AS "${c.simpleJavaField}.${a[0]}",
					</#list>
				</#if>
				<#-- 父表关联字段 -->
				<#if table.parentExists && table.parentTableFk == c.name>
					<#list c.javaFieldAttrs as a>
		b.${a[1]} AS "${c.simpleJavaField}.${a[0]}",
					</#list>
				</#if>
			</#list>
		</#assign>
${columnField?substring(0, columnField?last_index_of(","))}
	</sql>
	
	<#-- 输出字段关联表 -->
	<sql id="${className}Joins">
		<#-- 关联父表 -->
		<#if table.parentExists>
		LEFT JOIN ${table.parent.name} b ON b.id = a.${table.parentTableFk}
		</#if>
		<#-- 关联系统表 -->
		<#list table.columnList as c>
			<#if c.showType?? && c.showType == "userselect">
		LEFT JOIN sys_user u${c_index + 1} ON u${c_index + 1}.id = a.${c.name}
			<#elseif c.showType?? && c.showType == "officeselect">
		LEFT JOIN sys_office o${c_index + 1} ON o${c_index + 1}.id = a.${c.name}
			<#elseif c.showType?? && c.showType == "areaselect">
		LEFT JOIN sys_area a${c_index + 1} ON a${c_index + 1}.id = a.${c.name}
			</#if>
		</#list>
	</sql>
    
	<sql id="insertValues">
	(<#assign columnField>
		<#list table.columnList as c>
		${"#"}{${c.javaFieldId}},
		</#list>
		</#assign>
		${columnField?substring(0, columnField?last_index_of(","))}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(<#assign columnField>
		<#list table.columnList as c>
		${"#"}{entity.${c.javaFieldId}},
		</#list>
		</#assign>
		${columnField?substring(0, columnField?last_index_of(","))}
	)	
	</sql>
	
	<sql id="insertColumns">
	(<#assign columnField>
		<#list table.columnList as c>
		${c.name},
		</#list>
		</#assign>
		${columnField?substring(0, columnField?last_index_of(","))}
	) 
	</sql>
	
	<sql id="updateColumns"><#assign columnField>
		<#list table.columnList as c>
		<#if c.isEdit?? && c.isEdit == "1">
		${c.name} = ${"#"}{${c.javaFieldId}},
		</#if>
		</#list>
		</#assign>
		${columnField?substring(0, columnField?last_index_of(","))}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<#list table.columnList as c>
			<#if c.isEdit?? && c.isEdit == "1">
			<if test="entity.${c.javaFieldId} != null">
				${c.name} = ${"#"}{entity.${c.javaFieldId}},
			</if>
			</#if>
			</#list>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${"$"}{pair.logic} ${"$"}{pair.criterion.column}
									${"$"}{pair.criterion.match}
									${"$"}{pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${"$"}{pair.logic} ${"$"}{pair.criterion.column}
									${"$"}{pair.criterion.match}
									${"$"}{pair.criterion.value} and
									${"$"}{pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${"$"}{pair.logic} ${"$"}{pair.criterion.column} ${"$"}{pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										${"#"}{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${"$"}{pair.logic} ${"$"}{pair.criterion.column}
									${"$"}{pair.criterion.match}
									${"$"}{pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${"$"}{pair.logic} ${"$"}{pair.criterion.column}
									${"$"}{pair.criterion.match}
									${"$"}{pair.criterion.value} and
									${"$"}{pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${"$"}{pair.logic} ${"$"}{pair.criterion.column} ${"$"}{pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										${"#"}{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		<#if table.createTimeExists>
		ORDER BY a.create_time DESC
		<#elseif table.updateTimeExists>
		ORDER BY a.update_time DESC
		<#else>
		ORDER BY a.id DESC
		</#if>
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${"$"}{page.orderBy}
			</when>
			<otherwise>
				<#if table.createTimeExists>
				ORDER BY a.create_time DESC
				<#elseif table.updateTimeExists>
				ORDER BY a.update_time DESC
				<#else>
				ORDER BY a.id DESC
				</#if>
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		WHERE a.id = ${"#"}{id}
	</select>

  	<select id="getById" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		WHERE a.id = ${"#"}{id}
	</select>
		
    <select id="getByCriteria" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="${ClassName}">
		SELECT 
		<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="${className}Joins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM ${table.name}
		<include refid="${className}Joins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM ${table.name}
		<include refid="${className}Joins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO ${table.name}
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO ${table.name}
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE ${table.name} SET 
		<include refid="updateColumns"/>
		WHERE id = ${"#"}{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE ${table.name} 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE ${table.name} 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE ${table.name}		
		<include refid="updateSelectiveColumns"/>
		WHERE id = ${"#"}{entity.id}
	</update>

	<update id="delete">
		UPDATE ${table.name}
		SET del = 1
		<#if table.updateByExists>
		,update_by=${"#"}{updateBy}
		</#if>
		WHERE id = ${"#"}{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE ${table.name}
		SET del = 1
		<#if table.updateByExists>
		,update_by=${"#"}{entity.updateBy}
		</#if>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE ${table.name} 
		SET del = 1
		<#if table.updateByExists>
		,update_by=${"#"}{entity.updateBy}
		</#if>
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">${"#"}{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE ${table.name}
		SET del = 1
		<#if table.updateByExists>
		,update_by=${"#"}{entity.updateBy}
		</#if>
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM ${table.name}
		WHERE id = ${"#"}{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM ${table.name}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM ${table.name}
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM ${table.name}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">${"#"}{id} </foreach>    
	</update>
	
	
	 
</mapper>
]]>
	</content>
</template>