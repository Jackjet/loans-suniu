<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.RepayWarnDao">
    
	<sql id="repayWarnColumns">
		a.id AS "id",
		a.repay_id AS "repayId",
		a.apply_id AS "applyId",
		a.sys_user_name AS "sysUserName",
		a.sys_user_id AS "sysUserId",
		a.content AS "content",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="repayWarnJoins">
	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{repayId},
		#{applyId},
		#{sysUserName},
		#{sysUserId},
		#{content},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.repayId},
		#{entity.applyId},
		#{entity.sysUserName},
		#{entity.sysUserId},
		#{entity.content},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		repay_id,
		apply_id,
		sys_user_name,
		sys_user_id,
		content,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">
		<set>
			<if test="repayId != null and repayId != ''">
				repay_id = #{repayId},
			</if>
			<if test="applyId != null and applyId != ''">
				apply_id = #{applyId},
			</if>
			<if test="sysUserName != null and sysUserName != ''">
				sys_user_name = #{sysUserName},
			</if>
			<if test="sysUserId != null and sysUserId != ''">
				sys_user_id = #{sysUserId},
			</if>
			<if test="content != null and content != ''">
				content = #{content},
			</if>
			<if test="remark != null and remark != ''">
				remark = #{remark},
			</if>
			<if test="updateBy != null and updateBy != ''">
				update_by = #{updateBy},
			</if>
			<if test="updateTime != null and updateTime != ''">
				update_time = #{updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.repayId != null">
				repay_id = #{entity.repayId},
			</if>
			<if test="entity.applyId != null">
				apply_id = #{entity.applyId},
			</if>
			<if test="entity.sysUserName != null">
				sys_user_name = #{entity.sysUserName},
			</if>
			<if test="entity.sysUserId != null">
				sys_user_id = #{entity.sysUserId},
			</if>
			<if test="entity.content != null">
				content = #{entity.content},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="RepayWarn">
		SELECT 
		<include refid="repayWarnColumns"/>
		FROM loan_repay_warn a
		<include refid="repayWarnJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_repay_warn
		<include refid="repayWarnJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_repay_warn
		<include refid="repayWarnJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO loan_repay_warn
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO loan_repay_warn
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE loan_repay_warn
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE loan_repay_warn 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE loan_repay_warn 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_repay_warn		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_repay_warn
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE loan_repay_warn
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE loan_repay_warn 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE loan_repay_warn
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM loan_repay_warn
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_repay_warn
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_repay_warn
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM loan_repay_warn
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>

	<select id="getRepayWarnList" resultType="com.rongdu.loans.loan.vo.RepayWarnVO">
		SELECT
			a.id, a.repay_id, a.content, la.user_name, la.mobile, ld.repay_date, a.sys_user_name,
			ld.this_term, ld.total_amount, ld.actual_repay_time, ld.actual_repay_amt,
			CASE WHEN ld.repay_date = ld.actual_repay_date THEN 'SUCCESS' ELSE 'FALSE' END AS warnResult
		FROM
			loan_repay_warn a
		LEFT JOIN loan_repay_plan_item ld ON a.repay_id = ld.id
		LEFT JOIN loan_apply la ON a.apply_id = la.id
		<where>
			a.del = 0
			<if test="op.userName != null and op.userName != ''">
				and a.user_name = #{op.userName}
			</if>
			<if test="op.mobile != null and op.mobile != ''">
				and a.mobile = #{op.mobile}
			</if>
			<if test="op.sysUserId != null and op.sysUserId != ''">
				and a.sys_user_id = #{op.sysUserId}
			</if>
		</where>
		<include refid="pageOrderBy" />
	</select>

</mapper>