<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.BorrowInfoDAO">
    
	<sql id="borrowInfoColumns">
		a.id AS "id",
		a.apply_id AS "applyId",
		a.cont_no AS "contNo",
		a.user_id AS "userId",
		a.user_name AS "userName",
		a.title AS "title",
		a.borrow_amt AS "borrowAmt",
		a.borrow_date AS "borrowDate",
		a.actual_rate AS "actualRate",
		a.serv_fee_rate AS "servFeeRate",
		a.overdue_rate AS "overdueRate",
		a.overdue_fee AS "overdueFee",
		a.prepay_value AS "prepayValue",
		a.account_id AS "accountId",
		a.purpose AS "purpose",
		a.period_unit AS "periodUnit",
		a.period AS "period",
		a.repay_method AS "repayMethod",
		a.status AS "status",
		a.partner_id AS "partnerId",
		a.partner_name AS "partnerName",
		a.ext_info AS "extInfo",
		a.outside_serial_no AS "outsideSerialNo",
		a.push_time AS "pushTime",
		a.push_status AS "pushStatus",
		a.borrow_type AS "borrowType",
		a.pay_channel AS "payChannel",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="borrowInfoJoins">
	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{applyId},
		#{contNo},
		#{userId},
		#{userName},
		#{title},
		#{borrowAmt},
		#{borrowDate},
		#{actualRate},
		#{servFeeRate},
		#{overdueRate},
		#{overdueFee},
		#{prepayValue},
		#{accountId},
		#{purpose},
		#{periodUnit},
		#{period},
		#{repayMethod},
		#{status},
		#{partnerId},
		#{partnerName},
		#{extInfo},
		#{outsideSerialNo},
		#{pushTime},
		#{pushStatus},
		#{borrowType},
		#{payChannel},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.applyId},
		#{entity.contNo},
		#{entity.userId},
		#{entity.userName},
		#{entity.title},
		#{entity.borrowAmt},
		#{entity.borrowDate},
		#{entity.actualRate},
		#{entity.servFeeRate},
		#{entity.overdueRate},
		#{entity.overdueFee},
		#{entity.prepayValue},
		#{entity.accountId},
		#{entity.purpose},
		#{entity.periodUnit},
		#{entity.period},
		#{entity.repayMethod},
		#{entity.status},
		#{entity.partnerId},
		#{entity.partnerName},
		#{entity.extInfo},
		#{entity.outsideSerialNo},
		#{entity.pushTime},
		#{entity.pushStatus},
		#{entity.borrowType},
		#{entity.payChannel},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		apply_id,
		cont_no,
		user_id,
		user_name,
		title,
		borrow_amt,
		borrow_date,
		actual_rate,
		serv_fee_rate,
		overdue_rate,
		overdue_fee,
		prepay_value,
		account_id,
		purpose,
		period_unit,
		period,
		repay_method,
		status,
		partner_id,
		partner_name,
		ext_info,
		outside_serial_no,
		push_time,
		push_status,
		borrow_type,
		pay_channel,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		apply_id = #{applyId},
		cont_no = #{contNo},
		user_id = #{userId},
		user_name = #{userName},
		title = #{title},
		borrow_amt = #{borrowAmt},
		borrow_date = #{borrowDate},
		actual_rate = #{actualRate},
		serv_fee_rate = #{servFeeRate},
		overdue_rate = #{overdueRate},
		overdue_fee = #{overdueFee},
		prepay_value = #{prepayValue},
		account_id = #{accountId},
		purpose = #{purpose},
		period_unit = #{periodUnit},
		period = #{period},
		repay_method = #{repayMethod},
		status = #{status},
		partner_id = #{partnerId},
		partner_name = #{partnerName},
		ext_info = #{extInfo},
		outside_serial_no = #{outsideSerialNo},
		push_time = #{pushTime},
		push_status = #{pushStatus},
		borrow_type= #{borrowType},
		pay_channel= #{payChannel},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.applyId != null">
				apply_id = #{entity.applyId},
			</if>
			<if test="entity.contNo != null">
				cont_no = #{entity.contNo},
			</if>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.userName != null">
				user_name = #{entity.userName},
			</if>
			<if test="entity.title != null">
				title = #{entity.title},
			</if>
			<if test="entity.borrowAmt != null">
				borrow_amt = #{entity.borrowAmt},
			</if>
			<if test="entity.borrowDate != null">
				borrow_date = #{entity.borrowDate},
			</if>
			<if test="entity.actualRate != null">
				actual_rate = #{entity.actualRate},
			</if>
			<if test="entity.servFeeRate != null">
				serv_fee_rate = #{entity.servFeeRate},
			</if>
			<if test="entity.overdueRate != null">
				overdue_rate = #{entity.overdueRate},
			</if>
			<if test="entity.overdueFee != null">
				overdue_fee = #{entity.overdueFee},
			</if>
			<if test="entity.prepayValue != null">
				prepay_value = #{entity.prepayValue},
			</if>
			<if test="entity.accountId != null">
				account_id = #{entity.accountId},
			</if>
			<if test="entity.purpose != null">
				purpose = #{entity.purpose},
			</if>
			<if test="entity.periodUnit != null">
				period_unit = #{entity.periodUnit},
			</if>
			<if test="entity.period != null">
				period = #{entity.period},
			</if>
			<if test="entity.repayMethod != null">
				repay_method = #{entity.repayMethod},
			</if>
			<if test="entity.status != null">
				status = #{entity.status},
			</if>
			<if test="entity.partnerId != null">
				partner_id = #{entity.partnerId},
			</if>
			<if test="entity.partnerName != null">
				partner_name = #{entity.partnerName},
			</if>
			<if test="entity.extInfo != null">
				ext_info = #{entity.extInfo},
			</if>
			<if test="entity.outsideSerialNo != null">
				outside_serial_no = #{entity.outsideSerialNo},
			</if>
			<if test="entity.pushTime != null">
				push_time = #{entity.pushTime},
			</if>
			<if test="entity.pushStatus != null">
				push_status = #{entity.pushStatus},
			</if>
			<if test="entity.borrowType != null">
				borrow_type = #{entity.borrowType},
			</if>
			<if test="entity.payChannel != null">
				pay_channel = #{entity.payChannel},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="BorrowInfo">
		SELECT 
		<include refid="borrowInfoColumns"/>
		FROM loan_borrow_info a
		<include refid="borrowInfoJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_borrow_info
		<include refid="borrowInfoJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_borrow_info
		<include refid="borrowInfoJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO loan_borrow_info
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO loan_borrow_info
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE loan_borrow_info SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE loan_borrow_info 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE loan_borrow_info 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_borrow_info		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_borrow_info
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE loan_borrow_info
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE loan_borrow_info 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE loan_borrow_info
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM loan_borrow_info
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_borrow_info
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_borrow_info
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM loan_borrow_info
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>

	<update id="updatePushStatus">
		UPDATE loan_borrow_info
		SET
		<if test="outsideSerialNo != null and outsideSerialNo != ''">
			outside_serial_no = #{outsideSerialNo},
		</if>
		push_time = #{pushTime},
		push_status = #{pushStatus},
		update_by = #{updateBy},
		update_time = #{updateTime}
		where apply_id = #{applyId}
		<![CDATA[ and push_status <> 411 ]]>
	</update>

	<select id="getByOutsideSerialNo" resultType="BorrowInfo">
		SELECT <include refid="borrowInfoColumns"/>
		from loan_borrow_info a WHERE a.outside_serial_no = #{outsideSerialNo} and a.del = 0
	</select>
	
	<select id="getByApplyId" resultType="BorrowInfo">
		SELECT <include refid="borrowInfoColumns"/>
		from loan_borrow_info a WHERE a.apply_id = #{applyId} and a.del = 0
	</select>
	
	<select id="getOutSideNumByApplyId" resultType="String">
		SELECT outside_serial_no
		from loan_borrow_info a WHERE a.apply_id = #{applyId} and a.del = 0
	</select>
	
	<select id="getApplyIdByOutSideNum" resultType="String">
		SELECT apply_id
		from loan_borrow_info a WHERE a.outside_serial_no = #{outSideNum} and a.del = 0
	</select>

	<select id="getHanjscurrPayedAmt" resultType="BigDecimal">
		SELECT
			ROUND((sum(borrow_amt) * (1 - serv_fee_rate)), 2) AS amt
		FROM
			loan_borrow_info
		WHERE
			del = 0
		AND push_status = 411
		AND pay_channel = 5
		AND push_time > curdate()
	</select>
	
	<select id="sumLeshiPayedAmt" resultType="BigDecimal">
		SELECT
			COALESCE(SUM(borrow_amt),0)
		FROM
			loan_borrow_info
		WHERE
			del = 0
		AND push_status = 411
		AND pay_channel = 4
		AND push_time > curdate()
	</select>
		
	<delete id="delByApplyId">
		DELETE FROM loan_borrow_info WHERE apply_id = #{applyId}
	</delete>
</mapper>