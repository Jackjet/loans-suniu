<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.ProductDAO">
    
	<sql id="productColumns">
		a.id AS "id",
		a.name AS "name",
		a.type AS "type",
		a.description AS "description",
		a.min_incr_amt AS "minIncrAmt",
		a.min_amt AS "minAmt",
		a.max_amt AS "maxAmt",
		a.repay_freq AS "repayFreq",
		a.repay_unit AS "repayUnit",
		a.repay_method AS "repayMethod",
		a.prepay AS "prepay",
		a.min_loan_day AS "minLoanDay",
		a.start_interest AS "startInterest",
		a.grace_day AS "graceDay",
		a.status AS "status",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="productJoins">
	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{name},
		#{type},
		#{description},
		#{minIncrAmt},
		#{minAmt},
		#{maxAmt},
		#{repayFreq},
		#{repayUnit},
		#{repayMethod},
		#{prepay},
		#{minLoanDay},
		#{startInterest},
		#{graceDay},
		#{status},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.name},
		#{entity.type},
		#{entity.description},
		#{entity.minIncrAmt},
		#{entity.minAmt},
		#{entity.maxAmt},
		#{entity.repayFreq},
		#{entity.repayUnit},
		#{entity.repayMethod},
		#{entity.prepay},
		#{entity.minLoanDay},
		#{entity.startInterest},
		#{entity.graceDay},
		#{entity.status},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		name,
		type,
		description,
		min_incr_amt,
		min_amt,
		max_amt,
		repay_freq,
		repay_unit,
		repay_method,
		prepay,
		min_loan_day,
		start_interest,
		grace_day,
		status,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		name = #{name},
		type = #{type},
		description = #{description},
		min_incr_amt = #{minIncrAmt},
		min_amt = #{minAmt},
		max_amt = #{maxAmt},
		repay_freq = #{repayFreq},
		repay_unit = #{repayUnit},
		repay_method = #{repayMethod},
		prepay = #{prepay},
		min_loan_day = #{minLoanDay},
		start_interest = #{startInterest},
		grace_day = #{graceDay},
		status = #{status},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.name != null">
				name = #{entity.name},
			</if>
			<if test="entity.type != null">
				type = #{entity.type},
			</if>
			<if test="entity.description != null">
				description = #{entity.description},
			</if>
			<if test="entity.minIncrAmt != null">
				min_incr_amt = #{entity.minIncrAmt},
			</if>
			<if test="entity.minAmt != null">
				min_amt = #{entity.minAmt},
			</if>
			<if test="entity.maxAmt != null">
				max_amt = #{entity.maxAmt},
			</if>
			<if test="entity.repayFreq != null">
				repay_freq = #{entity.repayFreq},
			</if>
			<if test="entity.repayUnit != null">
				repay_unit = #{entity.repayUnit},
			</if>
			<if test="entity.repayMethod != null">
				repay_method = #{entity.repayMethod},
			</if>
			<if test="entity.prepay != null">
				prepay = #{entity.prepay},
			</if>
			<if test="entity.minLoanDay != null">
				min_loan_day = #{entity.minLoanDay},
			</if>
			<if test="entity.startInterest != null">
				start_interest = #{entity.startInterest},
			</if>
			<if test="entity.graceDay != null">
				grace_day = #{entity.graceDay},
			</if>
			<if test="entity.status != null">
				status = #{entity.status},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="Product">
		SELECT 
		<include refid="productColumns"/>
		FROM loan_product a
		<include refid="productJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_product
		<include refid="productJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_product
		<include refid="productJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO loan_product
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO loan_product
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE loan_product SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE loan_product 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE loan_product 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_product		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_product
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE loan_product
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE loan_product 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE loan_product
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM loan_product
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_product
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_product
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM loan_product
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	
	 
</mapper>