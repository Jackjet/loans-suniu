<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.CollectionRecordDao">
    
	<sql id="collectionRecordColumns">
		a.id AS "id",
		a.repay_plan_item_id AS "repayPlanItemId",
		a.apply_id AS "applyId",
		a.cont_no AS "contNo",
		a.user_id AS "userId",
		a.user_name AS "userName",
		a.operator_id AS "operatorId",
		a.operator_name AS "operatorName",
		a.type AS "type",
		a.relationship AS "relationship",
		a.contact_name AS "contactName",
		a.contact_mobile AS "contactMobile",
		a.result AS "result",
		a.content AS "content",
		a.promise AS "promise",
		a.promise_date AS "promiseDate",
		a.next_contact_time AS "nextContactTime",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="collectionRecordJoins">
	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{repayPlanItemId},
		#{applyId},
		#{contNo},
		#{userId},
		#{userName},
		#{operatorId},
		#{operatorName},
		#{type},
		#{relationship},
		#{contactName},
		#{contactMobile},
		#{result},
		#{content},
		#{promise},
		#{promiseDate},
		#{nextContactTime},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.repayPlanItemId},
		#{entity.applyId},
		#{entity.contNo},
		#{entity.userId},
		#{entity.userName},
		#{entity.operatorId},
		#{entity.operatorName},
		#{entity.type},
		#{entity.relationship},
		#{entity.contactName},
		#{entity.contactMobile},
		#{entity.result},
		#{entity.content},
		#{entity.promise},
		#{entity.promiseDate},
		#{entity.nextContactTime},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		repay_plan_item_id,
		apply_id,
		cont_no,
		user_id,
		user_name,
		operator_id,
		operator_name,
		type,
		relationship,
		contact_name,
		contact_mobile,
		result,
		content,
		promise,
		promise_date,
		next_contact_time,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		repay_plan_item_id = #{repayPlanItemId},
		apply_id = #{applyId},
		cont_no = #{contNo},
		user_id = #{userId},
		user_name = #{userName},
		operator_id = #{operatorId},
		operator_name = #{operatorName},
		type = #{type},
		relationship = #{relationship},
		contact_name = #{contactName},
		contact_mobile = #{contactMobile},
		result = #{result},
		content = #{content},
		promise = #{promise},
		promise_date = #{promiseDate},
		next_contact_time = #{nextContactTime},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.repayPlanItemId != null">
				repay_plan_item_id = #{entity.repayPlanItemId},
			</if>
			<if test="entity.applyId != null">
				apply_id = #{entity.applyId},
			</if>
			<if test="entity.contNo != null">
				cont_no = #{entity.contNo},
			</if>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.userName != null">
				user_name = #{entity.userName},
			</if>
			<if test="entity.operatorId != null">
				operator_id = #{entity.operatorId},
			</if>
			<if test="entity.operatorName != null">
				operator_name = #{entity.operatorName},
			</if>
			<if test="entity.type != null">
				type = #{entity.type},
			</if>
			<if test="entity.relationship != null">
				relationship = #{entity.relationship},
			</if>
			<if test="entity.contactName != null">
				contact_name = #{entity.contactName},
			</if>
			<if test="entity.contactMobile != null">
				contact_mobile = #{entity.contactMobile},
			</if>
			<if test="entity.result != null">
				result = #{entity.result},
			</if>
			<if test="entity.content != null">
				content = #{entity.content},
			</if>
			<if test="entity.promise != null">
				promise = #{entity.promise},
			</if>
			<if test="entity.promiseDate != null">
				promise_date = #{entity.promiseDate},
			</if>
			<if test="entity.nextContactTime != null">
				next_contact_time = #{entity.nextContactTime},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="CollectionRecord">
		SELECT 
		<include refid="collectionRecordColumns"/>
		FROM loan_collection_record a
		<include refid="collectionRecordJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_collection_record
		<include refid="collectionRecordJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_collection_record
		<include refid="collectionRecordJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO loan_collection_record
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO loan_collection_record
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE loan_collection_record SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE loan_collection_record 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE loan_collection_record 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_collection_record		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_collection_record
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE loan_collection_record
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE loan_collection_record 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE loan_collection_record
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM loan_collection_record
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_collection_record
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_collection_record
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM loan_collection_record
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	
	 
</mapper>