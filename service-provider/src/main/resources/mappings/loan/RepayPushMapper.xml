<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.RepayPushDAO">
    
	<sql id="repayPushColumns">
		a.id AS "id",
		a.user_id AS "userId",
		a.apply_id AS "applyId",
		a.asset_id AS "assetId",
		a.account_id AS "accountId",
		a.push_type AS "pushType",
		a.push_result AS "pushResult",
		a.push_describe AS "pushDescribe",
		a.chl_order_no AS "chlOrderNo",
		a.tx_amount AS "txAmount",
		a.prepay_fee AS "prepayFee",
		a.principal AS "principal",
		a.interest AS "interest",
		a.reduce_fee AS "reduceFee",
		a.overdue_fee AS "overdueFee",
		a.overdue_interest AS "overdueInterest",
		a.repay_date AS "repayDate",
		a.interest_start_date AS "interestStartDate",
		a.interest_end_date AS "interestEndDate",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="repayPushJoins">
	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{userId},
		#{applyId},
		#{assetId},
		#{accountId},
		#{pushType},
		#{pushResult},
		#{pushDescribe},
		#{chlOrderNo},
		#{txAmount},
		#{prepayFee},
		#{principal},
		#{interest},
		#{reduceFee},
		#{overdueFee},
		#{overdueInterest},
		#{repayDate},
		#{interestStartDate},
		#{interestEndDate},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.userId},
		#{entity.applyId},
		#{entity.assetId},
		#{entity.accountId},
		#{entity.pushType},
		#{entity.pushResult},
		#{entity.pushDescribe},
		#{entity.chlOrderNo},
		#{entity.txAmount},
		#{entity.prepayFee},
		#{entity.principal},
		#{entity.interest},
		#{entity.reduceFee},
		#{entity.overdueFee},
		#{entity.overdueInterest},
		#{entity.repayDate},
		#{entity.interestStartDate},
		#{entity.interestEndDate},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		user_id,
		apply_id,
		asset_id,
		account_id,
		push_type,
		push_result,
		push_describe,
		chl_order_no,
		tx_amount,
		prepay_fee,
		principal,
		interest,
		reduce_fee,
		overdue_fee,
		overdue_interest,
		repay_date,
		interest_start_date,
		interest_end_date,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		user_id = #{userId},
		apply_id = #{applyId},
		asset_id = #{assetId},
		account_id = #{accountId},
		push_type = #{pushType},
		push_result = #{pushResult},
		push_describe = #{pushDescribe},
		chl_order_no = #{chlOrderNo},
		tx_amount = #{txAmount},
		prepay_fee = #{prepayFee},
		principal = #{principal},
		interest = #{interest},
		reduce_fee = #{reduceFee},
		overdue_fee = #{overdueFee},
		overdue_interest = #{overdueInterest},
		repay_date = #{repayDate},
		interest_start_date = #{interestStartDate},
		interest_end_date = #{interestEndDate},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.applyId != null">
				apply_id = #{entity.applyId},
			</if>
			<if test="entity.assetId != null">
				asset_id = #{entity.assetId},
			</if>
			<if test="entity.accountId != null">
				account_id = #{entity.accountId},
			</if>
			<if test="entity.pushType != null">
				push_type = #{entity.pushType},
			</if>
			<if test="entity.pushResult != null">
				push_result = #{entity.pushResult},
			</if>
			<if test="entity.pushDescribe != null">
				push_describe = #{entity.pushDescribe},
			</if>
			<if test="entity.chlOrderNo != null">
				chl_order_no = #{entity.chlOrderNo},
			</if>
			<if test="entity.txAmount != null">
				tx_amount = #{entity.txAmount},
			</if>
			<if test="entity.prepayFee != null">
				prepay_fee = #{entity.prepayFee},
			</if>
			<if test="entity.principal != null">
				principal = #{entity.principal},
			</if>
			<if test="entity.interest != null">
				interest = #{entity.interest},
			</if>
			<if test="entity.reduceFee != null">
				reduce_fee = #{entity.reduceFee},
			</if>
			<if test="entity.overdueFee != null">
				overdue_fee = #{entity.overdueFee},
			</if>
			<if test="entity.overdueInterest != null">
				overdue_interest = #{entity.overdueInterest},
			</if>
			<if test="entity.repayDate != null">
				repay_date = #{entity.repayDate},
			</if>
			<if test="entity.interestStartDate != null">
				interest_start_date = #{entity.interestStartDate},
			</if>
			<if test="entity.interestEndDate != null">
				interest_end_date = #{entity.interestEndDate},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="RepayPush">
		SELECT 
		<include refid="repayPushColumns"/>
		FROM loan_repay_push a
		<include refid="repayPushJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_repay_push
		<include refid="repayPushJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_repay_push
		<include refid="repayPushJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO loan_repay_push
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO loan_repay_push
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE loan_repay_push SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE loan_repay_push 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE loan_repay_push 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_repay_push		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_repay_push
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE loan_repay_push
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE loan_repay_push 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE loan_repay_push
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM loan_repay_push
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_repay_push
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_repay_push
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM loan_repay_push
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="updatePushResultByAssetId">
		UPDATE loan_repay_push SET 
		    <if test="pushResult != null">
				push_result = #{pushResult},
			</if>
			<if test="pushDescribe != null">
				push_describe = #{pushDescribe},
			</if>
			<if test="remark != null">
				remark = #{remark},
			</if>
			<if test="updateBy != null">
				update_by = #{updateBy},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime},
			</if>
			del = 0
		WHERE asset_id = #{assetId}
	</update> 
	
	<select id="countByAssetId" resultType="int">
		SELECT COUNT(1) 
		  FROM loan_repay_push 
		 WHERE del = 0 
		   AND asset_id = #{assetId}
	</select>
	
	<select id="getPushFailByType" resultType="RepayPush">
		SELECT 
		  <include refid="repayPushColumns"/>
		  FROM loan_repay_push a
		 WHERE a.del = 0 
		   AND a.push_type = #{pushType}
		   AND a.push_result = 2
	</select>
	
	<select id="getPayStatus" resultType="string" parameterType="string">
		SELECT 
		  t.pay_status 
		FROM
		  loan_repay_log t 
		WHERE  t.chl_order_no = #{payComOrderNo} 
		  AND t.del = 0 
		ORDER BY t.succ_time DESC
		 LIMIT 1
	</select>
	
	<update id="deleteAssetId">
		UPDATE loan_repay_push
		SET del = 1
		WHERE asset_id = #{assetId}
	</update>
</mapper>