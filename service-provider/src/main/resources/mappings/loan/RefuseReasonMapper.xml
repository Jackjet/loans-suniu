<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.RefuseReasonDAO">

	<sql id="refuseReasonColumns">
		a.id AS "id",
		a.reason AS "reason",
		a.level AS "level",
		a.num AS "num",
		a.pid AS "pid",
		a.sort AS "sort",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>

	<sql id="refuseReasonJoins">
	</sql>

	<sql id="insertValues">
		(
		#{entity.id},
		#{entity.reason},
		#{entity.level},
		#{entity.num},
		#{entity.pid},
		#{entity.sort},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
		)
	</sql>

	<sql id="insertColumns">
		(
		id,
		reason,
		level,
		num,
		pid,
		sort,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
		)
	</sql>

	<sql id="updateColumns">
		reason = #{reason},
		level = #{level},
		num = #{num},
		pid = #{pid},
		sort = #{sort},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>

	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.reason != null">
				reason = #{entity.reason},
			</if>
			<if test="entity.level != null">
				level = #{entity.level},
			</if>
			<if test="entity.num != null">
				num = #{entity.num},
			</if>
			<if test="entity.pid != null">
				pid = #{entity.pid},
			</if>
			<if test="entity.sort != null">
				sort = #{entity.sort},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>

	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>

	<sql id="whereByCriteria">
		<where>
			<if test="criteria.valid">
				<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
					<foreach collection="criteria.pairList" item="pair">
						<choose>
							<when test="pair.criterion.singleValue">
								${pair.logic} ${pair.criterion.column}
								${pair.criterion.match}
								${pair.criterion.value}
							</when>
							<when test="pair.criterion.betweenValue">
								${pair.logic} ${pair.criterion.column}
								${pair.criterion.match}
								${pair.criterion.value} and
								${pair.criterion.secondValue}
							</when>
							<when test="pair.criterion.listValue">
								${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
								<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
									#{item}
								</foreach>
							</when>
						</choose>
					</foreach>
				</trim>
			</if>
		</where>
	</sql>

	<sql id="orderBy">
		ORDER BY a.sort
	</sql>

	<sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>

	<select id="get" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="getById" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="getByCriteria" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		<include refid="whereByCriteria" />
	</select>

	<select id="findAllByCriteria" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>

	<select id="findAllByCriteriaList" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>

	<select id="getPage" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		<include refid="pageOrderBy" />
	</select>

	<select id="getPageByCriteria" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>

	<select id="getPageByCriteriaList" resultType="RefuseReason">
		SELECT
		<include refid="refuseReasonColumns"/>
		FROM loan_refuse_reason a
		<include refid="refuseReasonJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>

	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_refuse_reason
		<include refid="refuseReasonJoins"/>
		<include refid="whereByCriteria" />
	</select>

	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_refuse_reason
		<include refid="refuseReasonJoins"/>
		<include refid="whereByCriteriaList" />
	</select>

	<insert id="insert">
		INSERT INTO loan_refuse_reason
		<include refid="insertColumns"/>
		VALUES
		<include refid="insertValues"/>
	</insert>

	<insert id="insertBatch">
		INSERT INTO loan_refuse_reason
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
			<include refid="insertValues"/>
		</foreach>
	</insert>

	<update id="update">
		UPDATE loan_refuse_reason SET
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>

	<update id="updateByCriteriaSelective">
		UPDATE loan_refuse_reason
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>

	<update id="updateByCriteriaListSelective">
		UPDATE loan_refuse_reason
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_refuse_reason
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_refuse_reason
		SET del = 1
		WHERE id = #{id}
	</update>

	<update id="deleteByCriteria">
		UPDATE loan_refuse_reason
		SET del = 1
		<include refid="whereByCriteria"/>
	</update>

	<update id="deleteByCriteriaList">
		UPDATE loan_refuse_reason
		SET del = 1
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="deleteTruely">
		DELETE FROM loan_refuse_reason
		WHERE id = #{id}
	</update>

	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_refuse_reason
		<include refid="whereByCriteria"/>
	</update>

	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_refuse_reason
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="deleteBatch">
		UPDATE loan_refuse_reason
		SET del = 1
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>
	</update>

	<update id="deleteBatchTruely">
		DELETE FROM loan_refuse_reason
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>
	</update>

	<update id="record">
		UPDATE loan_refuse_reason set num = num + 1 where id = #{id};
	</update>

</mapper>