<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.ContactHistoryDAO">
   
	<resultMap id="BaseResultMap" type="com.rongdu.loans.loan.entity.ContactHistory">
		<id column="ID" property="id" />
		<result column="user_id" property="userId" />
		<result column="RELATIONSHIP" property="relationship" />
		<result column="NAME" property="name" />
		<result column="MOBILE" property="mobile" />
		<result column="SOURCE" property="source" />
		<result column="REMARK" property="remark" />
		<result column="CREATE_BY" property="createBy" />
		<result column="CREATE_TIME" property="createTime" />
		<result column="UPDATE_BY" property="updateBy" />
		<result column="UPDATE_TIME" property="updateTime" />
		<result column="DEL" property="del" />
	</resultMap>
	
	<sql id="contactHistoryColumns">
		a.id AS "id",
		a.user_id AS "userId",
		a.apply_id AS "applyId",
		a.relationship AS "relationship",
		a.name AS "name",
		a.mobile AS "mobile",
		a.source AS "source",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	
	<sql id="contactHistoryJoins">
		LEFT JOIN sys_user u2 ON u2.id = a.user_id
	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{userId},
		#{applyId},
		#{relationship},
		#{name},
		#{mobile},
		#{source},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.userId},
		#{entity.applyId},
		#{entity.relationship},
		#{entity.name},
		#{entity.mobile},
		#{entity.source},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		user_id,
		apply_id,
		relationship,
		name,
		mobile,
		source,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		user_id = #{userId},
		apply_id = #{applyId},
		relationship = #{relationship},
		name = #{name},
		mobile = #{mobile},
		source = #{source},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.applyId != null">
				apply_id = #{entity.applyId},
			</if>
			<if test="entity.relationship != null">
				relationship = #{entity.relationship},
			</if>
			<if test="entity.name != null">
				name = #{entity.name},
			</if>
			<if test="entity.mobile != null">
				mobile = #{entity.mobile},
			</if>
			<if test="entity.source != null">
				mobile = #{entity.source},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="ContactHistory">
		SELECT 
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<include refid="contactHistoryJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_contact_history
		<include refid="contactHistoryJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_contact_history
		<include refid="contactHistoryJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO loan_contact_history
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO loan_contact_history
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE loan_contact_history SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE loan_contact_history 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE loan_contact_history 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_contact_history		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_contact_history
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE loan_contact_history
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE loan_contact_history 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE loan_contact_history
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM loan_contact_history
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_contact_history
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_contact_history
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM loan_contact_history
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>

	<select id="getByMobile" resultType="ContactHistory">
		SELECT
		<include refid="contactHistoryColumns"/>
		FROM loan_contact_history a
		<where>
			a.del = 0 and a.mobile in
			<foreach item="item" collection="list" open="(" separator="," close=")">
				#{item}
			</foreach>
		</where>
		ORDER BY a.mobile
	</select>
	
	<select id="getContactByUserId" parameterType="string" resultMap="BaseResultMap">
		SELECT 
		  a.user_id,
		  a.relationship,
		  a.name,
		  a.mobile
		FROM
		  cust_contact a 
		WHERE a.del = 0 
		  AND user_id = #{userId};
	</select>
	
	<select id="getContactHisByApplyNo" parameterType="string" resultMap="BaseResultMap"> 
		  SELECT 
		      t.`id`,
			  t.`user_id`,
			  t.`relationship`,
			  t.`name`,
			  t.`mobile`,
			  t.`source` 
			FROM
			  loan_contact_history t 
		   WHERE t.`apply_id` = #{applyId}
		ORDER BY t.`relationship`, t.`id`
	</select>
	
	<update id="delContactHistory">
		DELETE FROM loan_contact_history
		 WHERE apply_id = #{applyId}
		   AND del = 0 
	</update>
	
	<update id="deleteFromCollection">
		UPDATE loan_contact_history
		SET del = 1
		    ,update_by=#{updateBy}
		    ,update_time = #{updateTime}
		WHERE id = #{id}
	</update>
</mapper>