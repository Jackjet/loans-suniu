<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.loan.dao.LoanTrafficStatisticsDao">
    
	<sql id="loanTrafficStatisticsColumns">
		a.id AS "id",
		a.traffic_id AS "trafficId",
		a.traffic_name AS "trafficName",
		a.views AS "views",
		a.hits AS "hits",
		a.stats_date AS "statsDate",
		a.status AS "status",
		a.remark AS "remark",
		a.create_time AS "createTime",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="loanTrafficStatisticsJoins">
	</sql>
    
	<sql id="insertValues">
	(		
		#{trafficId},
		#{trafficName},
		#{views},
		#{hits},
		#{statsDate},
		#{status},
		#{remark},
		#{createTime},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.trafficId},
		#{entity.trafficName},
		#{entity.views},
		#{entity.hits},
		#{entity.statsDate},
		#{entity.status},
		#{entity.remark},
		#{entity.createTime},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		traffic_id,
		traffic_name,
		views,
		hits,
		stats_date,
		status,
		remark,
		create_time,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		traffic_id = #{trafficId},
		traffic_name = #{trafficName},
		views = #{views},
		hits = #{hits},
		stats_date = #{statsDate},
		status = #{status},
		remark = #{remark}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.trafficId != null">
				traffic_id = #{entity.trafficId},
			</if>
			<if test="entity.trafficName != null">
				traffic_name = #{entity.trafficName},
			</if>
			<if test="entity.views != null">
				views = #{entity.views},
			</if>
			<if test="entity.hits != null">
				hits = #{entity.hits},
			</if>
			<if test="entity.statsDate != null">
				stats_date = #{entity.statsDate},
			</if>
			<if test="entity.status != null">
				status = #{entity.status},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="LoanTrafficStatistics">
		SELECT 
		<include refid="loanTrafficStatisticsColumns"/>
		FROM loan_traffic_statistics a
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM loan_traffic_statistics
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM loan_traffic_statistics
		<include refid="loanTrafficStatisticsJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO loan_traffic_statistics
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO loan_traffic_statistics
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE loan_traffic_statistics SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE loan_traffic_statistics 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE loan_traffic_statistics 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE loan_traffic_statistics		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE loan_traffic_statistics
		SET del = 1
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE loan_traffic_statistics
		SET del = 1
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE loan_traffic_statistics 
		SET del = 1
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE loan_traffic_statistics
		SET del = 1
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM loan_traffic_statistics
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM loan_traffic_statistics
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM loan_traffic_statistics
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM loan_traffic_statistics
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="addHits">
		update 
			loan_traffic_statistics
		set 
			hits = hits + 1,
			update_time = CURRENT_TIMESTAMP 
		where 
			traffic_id  = #{trafficId} and stats_date = #{statsDate}
	</update>
	 
</mapper>