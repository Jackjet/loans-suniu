<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.basic.dao.AreaDAO">

	<sql id="areaColumns">
		a.id AS "id",
		a.name AS "name",
		a.parent_id AS "parentId",
		a.short_name AS "shortName",
		a.level_type AS "levelType",
		a.city_code AS "cityCode",
		a.zip_code AS "zipCode",
		a.merge_name AS "mergeName",
		a.lng AS "lng",
		a.lat AS "lat",
		a.pinyin AS "pinyin",
		a.remark AS "remark",
		a.create_by AS "createBy",
		a.create_time AS "createTime",
		a.update_by AS "updateBy",
		a.update_time AS "updateTime",
		a.del AS "del"
	</sql>
	
	<sql id="areaJoins">
	</sql>
    
	<sql id="insertValues">
	(		
		#{id},
		#{name},
		#{parentId},
		#{shortName},
		#{levelType},
		#{cityCode},
		#{zipCode},
		#{mergeName},
		#{lng},
		#{lat},
		#{pinyin},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
	)	
	</sql>
	
	<sql id="insertBatchValues">
	(		
		#{entity.id},
		#{entity.name},
		#{entity.parentId},
		#{entity.shortName},
		#{entity.levelType},
		#{entity.cityCode},
		#{entity.zipCode},
		#{entity.mergeName},
		#{entity.lng},
		#{entity.lat},
		#{entity.pinyin},
		#{entity.remark},
		#{entity.createBy},
		#{entity.createTime},
		#{entity.updateBy},
		#{entity.updateTime},
		#{entity.del}
	)	
	</sql>
	
	<sql id="insertColumns">
	(		
		id,
		name,
		parent_id,
		short_name,
		level_type,
		city_code,
		zip_code,
		merge_name,
		lng,
		lat,
		pinyin,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
	) 
	</sql>
	
	<sql id="updateColumns">		
		name = #{name},
		parent_id = #{parentId},
		short_name = #{shortName},
		level_type = #{levelType},
		city_code = #{cityCode},
		zip_code = #{zipCode},
		merge_name = #{mergeName},
		lng = #{lng},
		lat = #{lat},
		pinyin = #{pinyin},
		remark = #{remark},
		update_by = #{updateBy},
		update_time = #{updateTime}
	</sql>
	
	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.name != null">
				name = #{entity.name},
			</if>
			<if test="entity.parentId != null">
				parent_id = #{entity.parentId},
			</if>
			<if test="entity.shortName != null">
				short_name = #{entity.shortName},
			</if>
			<if test="entity.levelType != null">
				level_type = #{entity.levelType},
			</if>
			<if test="entity.cityCode != null">
				city_code = #{entity.cityCode},
			</if>
			<if test="entity.zipCode != null">
				zip_code = #{entity.zipCode},
			</if>
			<if test="entity.mergeName != null">
				merge_name = #{entity.mergeName},
			</if>
			<if test="entity.lng != null">
				lng = #{entity.lng},
			</if>
			<if test="entity.lat != null">
				lat = #{entity.lat},
			</if>
			<if test="entity.pinyin != null">
				pinyin = #{entity.pinyin},
			</if>
			<if test="entity.remark != null">
				remark = #{entity.remark},
			</if>
			<if test="entity.updateBy != null">
				update_by = #{entity.updateBy},
			</if>
			<if test="entity.updateTime != null">
				update_time = #{entity.updateTime},
			</if>
		</set>
	</sql>
	
	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="whereByCriteria">
		<where>
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
		</where>
	</sql>
	
   <sql id="orderBy">
		ORDER BY a.create_time DESC
	</sql>
	
   <sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_time DESC
			</otherwise>
		</choose>
	</sql>
  
  	<select id="get" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		WHERE a.id = #{id}
	</select>

  	<select id="getById" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		WHERE a.id = #{id}
	</select>
		
    <select id="getByCriteria" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="findAllByCriteria" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>
	
	<select id="findAllByCriteriaList" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>
	
	<select id="getPage" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteria" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="getPageByCriteriaList" resultType="Area">
		SELECT 
		<include refid="areaColumns"/>
		FROM basic_area a
		<include refid="areaJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>
	
	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM basic_area
		<include refid="areaJoins"/>
		<include refid="whereByCriteria" />
	</select>
	
	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM basic_area
		<include refid="areaJoins"/>
		<include refid="whereByCriteriaList" />
	</select>
	
	<insert id="insert">
		INSERT INTO basic_area
		<include refid="insertColumns"/>
		VALUES 
		<include refid="insertValues"/>
	</insert>
	
	<insert id="insertBatch">
		INSERT INTO basic_area
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
         <include refid="insertBatchValues"/>
        </foreach>	
	</insert>
	
	<update id="update">
		UPDATE basic_area SET 
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>
	
	<update id="updateByCriteriaSelective">
		UPDATE basic_area 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="updateByCriteriaListSelective">
		UPDATE basic_area 
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE basic_area		
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE basic_area
		SET del = 1
		,update_by=#{updateBy}
		WHERE id = #{id}
	</update>
	
	<update id="deleteByCriteria">
		UPDATE basic_area
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteBatch">
		UPDATE basic_area 
		SET del = 1
		,update_by=#{entity.updateBy}
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>
	
	<update id="deleteByCriteriaList">
		UPDATE basic_area
		SET del = 1
		,update_by=#{entity.updateBy}
		<include refid="whereByCriteriaList"/>
	</update>	
	
	<update id="deleteTruely">
		DELETE FROM basic_area
		WHERE id = #{id}
	</update>
	
	<update id="deleteTruelyByCriteria">
		DELETE FROM basic_area
		<include refid="whereByCriteria"/>
	</update>
	
	<update id="deleteTruelyByCriteriaList">
		DELETE FROM basic_area
		<include refid="whereByCriteriaList"/>
	</update>
	
	<update id="deleteBatchTruely">
		DELETE FROM basic_area
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>    
	</update>




	<resultMap id="simpleMap" type="com.rongdu.loans.basic.vo.AreaSimpleVO">
		<id column="ID" property="areaCode" />
		<result column="NAME" property="areaName" />
	</resultMap>

	<select id="getAreaCodeAndName" resultMap="simpleMap">
		SELECT t.id,t.name FROM basic_area t
	</select>

	<select id="getAreaName" parameterType="string" resultType="string">
		SELECT t.name
		FROM basic_area t
		WHERE t.id = #{id}
		LIMIT 1
	</select>
	
	 
</mapper>