<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rongdu.loans.cust.dao.BlacklistDAO">

	<resultMap id="BaseResultMap" type="com.rongdu.loans.cust.entity.Blacklist">
		<id column="ID" property="id" />
		<result column="user_id" property="userId" />
		<result column="ID_TYPE" property="idType" />
		<result column="ID_NO" property="idNo" />
		<result column="USER_NAME" property="userName" />
		<result column="BLACK_TYPE" property="blackType" />
		<result column="SOURCE" property="source" />
		<result column="OVERDUE_PERIOD" property="overduePeriod" />
		<result column="BLACK_TIME" property="blackTime" />
		<result column="REASON" property="reason" />
		<result column="IN_OUT_FLAG" property="inOutFlag" />
		<result column="STATUS" property="status" />
	</resultMap>
	
	<sql id="All_Column">
		id, user_id, id_type , id_no, user_name,black_type, source, overdue_period, black_time, reason, in_out_flag,status
	</sql>


	<sql id="blacklistColumns">
		a.id AS "id",
		a.user_id AS "userId",
		a.id_type AS "idType",
		a.id_no AS "idNo",
		a.user_name AS "userName",
		a.black_type AS "blackType",
		a.source AS "source",
		a.overdue_period AS "overduePeriod",
		a.black_time AS "blackTime",
		a.reason AS "reason",
		a.in_out_flag AS "inOutFlag",
		a.status AS "status"
	</sql>

	<sql id="blacklistJoins">
	</sql>

	<sql id="insertValues">
		(
		#{id},
		#{userId},
		#{idType},
		#{idNo},
		#{userName},
		#{blackType},
		#{source},
		#{overduePeriod},
		#{blackTime},
		#{reason},
		#{inOutFlag},
		#{status},
		#{remark},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{del}
		)
	</sql>

	<sql id="insertColumns">
		(
		id,
		user_id,
		id_type,
		id_no,
		user_name,
		black_type,
		source,
		overdue_period,
		black_time,
		reason,
		in_out_flag,
		status,
		remark,
		create_by,
		create_time,
		update_by,
		update_time,
		del
		)
	</sql>

	<sql id="updateColumns">
		user_id = #{userId},
		id_type = #{idType},
		id_no = #{idNo},
		user_name = #{userName},
		black_type = #{blackType},
		source = #{source},
		overdue_period = #{overduePeriod},
		black_time = #{blackTime},
		reason = #{reason},
		in_out_flag = #{inOutFlag},
		status = #{status}
	</sql>

	<sql id="updateSelectiveColumns">
		<set>
			<if test="entity.userId != null">
				user_id = #{entity.userId},
			</if>
			<if test="entity.idType != null">
				id_type = #{entity.idType},
			</if>
			<if test="entity.idNo != null">
				id_no = #{entity.idNo},
			</if>
			<if test="entity.userName != null">
				user_name = #{entity.userName},
			</if>
			<if test="entity.blackType != null">
				black_type = #{entity.blackType},
			</if>
			<if test="entity.source != null">
				source = #{entity.source},
			</if>
			<if test="entity.overduePeriod != null">
				overdue_period = #{entity.overduePeriod},
			</if>
			<if test="entity.blackTime != null">
				black_time = #{entity.blackTime},
			</if>
			<if test="entity.reason != null">
				reason = #{entity.reason},
			</if>
			<if test="entity.inOutFlag != null">
				in_out_flag = #{entity.inOutFlag},
			</if>
			<if test="entity.status != null">
				status = #{entity.status},
			</if>
		</set>
	</sql>

	<sql id="whereByCriteriaList">
		<where>
			<foreach collection="criteriaList" item="criteria" separator=" AND ">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
						<foreach collection="criteria.pairList" item="pair">
							<choose>
								<when test="pair.criterion.singleValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value}
								</when>
								<when test="pair.criterion.betweenValue">
									${pair.logic} ${pair.criterion.column}
									${pair.criterion.match}
									${pair.criterion.value} and
									${pair.criterion.secondValue}
								</when>
								<when test="pair.criterion.listValue">
									${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
									<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
										#{item}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>

	<sql id="whereByCriteria">
		<where>
			<if test="criteria.valid">
				<trim prefix="(" suffix=")" prefixOverrides="AND |OR ">
					<foreach collection="criteria.pairList" item="pair">
						<choose>
							<when test="pair.criterion.singleValue">
								${pair.logic} ${pair.criterion.column}
								${pair.criterion.match}
								${pair.criterion.value}
							</when>
							<when test="pair.criterion.betweenValue">
								${pair.logic} ${pair.criterion.column}
								${pair.criterion.match}
								${pair.criterion.value} and
								${pair.criterion.secondValue}
							</when>
							<when test="pair.criterion.listValue">
								${pair.logic} ${pair.criterion.column} ${pair.criterion.match}
								<foreach collection="pair.criterion.value" item="item" open="(" close=")" separator=",">
									#{item}
								</foreach>
							</when>
						</choose>
					</foreach>
				</trim>
			</if>
		</where>
	</sql>

	<sql id="orderBy">
		ORDER BY a.id DESC
	</sql>

	<sql id="pageOrderBy">
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.id DESC
			</otherwise>
		</choose>
	</sql>

	<select id="get" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="getById" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="getByCriteria" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
	</select>

	<select id="findAllByCriteria" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
		<include refid="orderBy" />
	</select>

	<select id="findAllByCriteriaList" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="orderBy" />
	</select>

	<select id="getPage" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="pageOrderBy" />
	</select>

	<select id="getPageByCriteria" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
		<include refid="pageOrderBy" />
	</select>

	<select id="getPageByCriteriaList" resultType="Blacklist">
		SELECT
		<include refid="blacklistColumns"/>
		FROM cust_blacklist a
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteriaList" />
		<include refid="pageOrderBy" />
	</select>

	<select id="countByCriteria" resultType="Long">
		SELECT COUNT(1) FROM cust_blacklist
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteria" />
	</select>

	<select id="countByCriteriaList" resultType="Long">
		SELECT COUNT(1) FROM cust_blacklist
		<include refid="blacklistJoins"/>
		<include refid="whereByCriteriaList" />
	</select>

	<insert id="insert">
		INSERT INTO cust_blacklist
		<include refid="insertColumns"/>
		VALUES
		<include refid="insertValues"/>
	</insert>

	<insert id="insertBatch">
		INSERT INTO cust_blacklist
		<include refid="insertColumns"/>
		VALUES
		<foreach collection="list" item="entity" index="index" separator=",">
			<include refid="insertValues"/>
		</foreach>
	</insert>

	<update id="update">
		UPDATE cust_blacklist SET
		<include refid="updateColumns"/>
		WHERE id = #{id}
	</update>

	<update id="updateByCriteriaSelective">
		UPDATE cust_blacklist
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteria"/>
	</update>

	<update id="updateByCriteriaListSelective">
		UPDATE cust_blacklist
		<include refid="updateSelectiveColumns"/>
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="updateByIdSelective">
		UPDATE cust_blacklist
		<include refid="updateSelectiveColumns"/>
		WHERE id = #{entity.id}
	</update>

	<update id="delete">
		UPDATE cust_blacklist
		SET del = 1
		WHERE id = #{id}
	</update>

	<update id="deleteByCriteria">
		UPDATE cust_blacklist
		SET del = 1
		<include refid="whereByCriteria"/>
	</update>

	<update id="deleteByCriteriaList">
		UPDATE cust_blacklist
		SET del = 1
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="deleteTruely">
		DELETE FROM cust_blacklist
		WHERE id = #{id}
	</update>

	<update id="deleteTruelyByCriteria">
		DELETE FROM cust_blacklist
		<include refid="whereByCriteria"/>
	</update>

	<update id="deleteTruelyByCriteriaList">
		DELETE FROM cust_blacklist
		<include refid="whereByCriteriaList"/>
	</update>

	<update id="deleteBatch">
		UPDATE cust_blacklist
		SET del = 1
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>
	</update>

	<update id="deleteBatchTruely">
		DELETE FROM cust_blacklist
		WHERE id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">#{id} </foreach>
	</update>

	<select id="getBlacklistByUserIdList" resultMap="BaseResultMap">
		SELECT
		<include refid="All_Column"/>
		FROM cust_blacklist
		WHERE
		`user_id` in
		<foreach item="userId" collection="userIdList" open="(" separator="," close=")">
			#{userId}
		</foreach>
		AND status in (0,2,3)
	</select>


</mapper>