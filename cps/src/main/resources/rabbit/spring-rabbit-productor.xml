<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">


    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数，默认为1 -->
        <property name="corePoolSize" value="10"/>
        <!-- 最大线程数，默认为Integer.MAX_VALUE -->
        <property name="maxPoolSize" value="50"/>
        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->
        <property name="queueCapacity" value="1000"/>
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="300"/>
        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>


    <rabbit:connection-factory id="connectionFactory"
                               host="${rabbit.host}" port="${rabbit.port}" username="${rabbit.username}"
                               password="${rabbit.password}" publisher-confirms="true"/>

    <rabbit:admin connection-factory="connectionFactory" id="amqpAdmin"/>

    <!-- queue 队列声明 -->
    <!-- <rabbit:queue id="loanApplyQuene" durable="true" auto-delete="false" exclusive="false" name="loanApplyQuene"/> -->
    <rabbit:queue id="accessLogQuene" durable="true" auto-delete="false" exclusive="false" name="accessLogQuene"/>

    <rabbit:queue id="pushUserBaseInfoQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushUserBaseInfoQuene"/>
    <rabbit:queue id="pushUserAdditionalInfoQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushUserAdditionalInfoQuene"/>

    <rabbit:queue id="pushRongBaseInfoQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushRongBaseInfoQuene"/>
    <rabbit:queue id="pushRongAdditionalInfoQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushRongAdditionalInfoQuene"/>


    <rabbit:queue id="pushSLLBaseInfoQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushSLLBaseInfoQuene"/>
    <rabbit:queue id="pushSLLAdditionalInfoQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushSLLAdditionalInfoQuene"/>

<!--
    <rabbit:queue id="pushJDQQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushJDQQuene"/>

    <rabbit:queue id="pushJDQAdditionQuene" durable="true" auto-delete="false" exclusive="false"
                  name="pushJDQAdditionQuene"/>
-->


    <!-- exchange queue binging key 绑定 -->
    <rabbit:direct-exchange name="mq-exchange" durable="true" auto-delete="false" id="mq-exchange">
        <rabbit:bindings>
            <!-- <rabbit:binding queue="loanApplyQuene" key="loanApplyQuene"/> -->
            <rabbit:binding queue="accessLogQuene" key="accessLogQuene"/>
<!--            <rabbit:binding queue="pushJDQQuene" key="pushJDQQuene"/>
            <rabbit:binding queue="pushJDQAdditionQuene" key="pushJDQAdditionQuene"/>-->

            <rabbit:binding queue="pushUserBaseInfoQuene" key="pushUserBaseInfoQuene"/>
            <rabbit:binding queue="pushUserAdditionalInfoQuene" key="pushUserAdditionalInfoQuene"/>

            <rabbit:binding queue="pushRongBaseInfoQuene" key="pushRongBaseInfoQuene"/>
            <rabbit:binding queue="pushRongAdditionalInfoQuene" key="pushRongAdditionalInfoQuene"/>


            <rabbit:binding queue="pushSLLBaseInfoQuene" key="pushSLLBaseInfoQuene"/>
            <rabbit:binding queue="pushSLLAdditionalInfoQuene" key="pushSLLAdditionalInfoQuene"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- spring template声明 -->
    <rabbit:template exchange="mq-exchange" id="amqpTemplate"
                     connection-factory="connectionFactory" message-converter="jsonMessageConverter"
                     confirm-callback="confirmCallBackListener"
                     return-callback="returnCallBackListener"
                     mandatory="true"/>

    <!-- 监听容器：当有消息到达时会通知监听在对应的队列上的监听对象 -->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual" task-executor="taskExecutor"
                               concurrency="1">

        <rabbit:listener queues="pushUserBaseInfoQuene" ref="pushUserBaseInfoConsumer"/>
        <rabbit:listener queues="pushUserAdditionalInfoQuene" ref="pushUserAdditionalInfoConsumer"/>
<!--

        <rabbit:listener queues="pushJDQQuene" ref="jDQConsumer"/>
        <rabbit:listener queues="pushJDQAdditionQuene" ref="jDQConsumer"/>
-->

        <rabbit:listener queues="pushRongBaseInfoQuene" ref="rong360BaseInfoConsumer"/>
        <rabbit:listener queues="pushRongAdditionalInfoQuene" ref="rong360AdditionalInfoConsumer"/>

        <rabbit:listener queues="pushSLLBaseInfoQuene" ref="SLLBaseConsumer"/>
        <rabbit:listener queues="pushSLLAdditionalInfoQuene" ref="SLLAdditionConsumer"/>


    </rabbit:listener-container>

</beans>